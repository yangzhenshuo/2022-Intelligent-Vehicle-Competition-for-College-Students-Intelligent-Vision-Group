<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RT106X.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RT106X.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Sat Feb 18 16:40:16 2023
<BR><P>
<H3>Maximum Stack Usage =       4296 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_thread_entry &rArr; $Super$$main &rArr; Binary_renew &rArr; Binary_threshold &rArr; HistEqImageConvert
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1cb]">LPUART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">__aeabi_assert</a><BR>
 <LI><a href="#[1ca]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">__aeabi_assert</a><BR>
 <LI><a href="#[215]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">__aeabi_assert</a><BR>
 <LI><a href="#[216]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">__aeabi_assert</a><BR>
 <LI><a href="#[19b]">DbgConsole_SendDataReliable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[86]">ACMP1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[87]">ACMP2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[88]">ACMP3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[89]">ACMP4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4e]">ADC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4f]">ADC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[84]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[81]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[82]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[83]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[42]">BEE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e0]">Binary_entry</a> from image.o(.text.Binary_entry) referenced 2 times from image.o(.text.BinaryRenew_thread_init)
 <LI><a href="#[5]">BusFault_Handler</a> from common.o(.text.BusFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cd]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2f]">CAN1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ce]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[30]">CAN2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[de]">CAN3_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a5]">CAN3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6a]">CCM_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6b]">CCM_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1e]">CORE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[36]">CSI_IRQHandler</a> from isr.o(.text.CSI_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e1]">CSI_TransferHandleIRQ</a> from fsl_csi.o(.text.CSI_TransferHandleIRQ) referenced 2 times from fsl_csi.o(.text.CSI_TransferCreateHandle)
 <LI><a href="#[3c]">CSU_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1c]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1d]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[50]">DCDC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3d]">DCP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3e]">DCP_VMI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ac]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[b]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b6]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[15]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b7]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[16]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b8]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[17]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b9]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[18]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ba]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[19]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bb]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1a]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ad]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[c]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ae]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[d]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[af]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[e]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b0]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[f]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b1]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[10]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b2]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[11]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b3]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[12]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b4]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[13]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b5]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[14]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bc]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1b]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e2]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(.text.DbgConsole_PrintCallback) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Printf)
 <LI><a href="#[8]">DebugMon_Handler</a> from common.o(.text.DebugMon_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_flexcan.o(.data.s_flexcanIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_usdhc.o(.data.s_usdhcIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 81 times from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8c]">ENC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8d]">ENC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8e]">ENC3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8f]">ENC4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dd]">ENET2_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a4]">ENET2_1588_Timer_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dc]">ENET2_DriverIRQHandler</a> from fsl_enet.o(.text.ENET2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a3]">ENET2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[db]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7e]">ENET_1588_Timer_IRQHandler</a> from fsl_enet.o(.text.ENET_1588_Timer_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[da]">ENET_DriverIRQHandler</a> from fsl_enet.o(.text.ENET_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7d]">ENET_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[69]">EWM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d4]">FLEXIO1_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[65]">FLEXIO1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d5]">FLEXIO2_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[66]">FLEXIO2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[df]">FLEXIO3_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[a7]">FLEXIO3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[31]">FLEXRAM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d6]">FLEXSPI2_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[76]">FLEXSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d7]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[77]">FLEXSPI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6c]">GPC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5b]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5c]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[53]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[54]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[55]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[56]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[57]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[58]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[59]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5a]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5d]">GPIO2_Combined_0_15_IRQHandler</a> from isr.o(.text.GPIO2_Combined_0_15_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5e]">GPIO2_Combined_16_31_IRQHandler</a> from isr.o(.text.GPIO2_Combined_16_31_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5f]">GPIO3_Combined_0_15_IRQHandler</a> from fsl_sdmmc_host.o(.text.GPIO3_Combined_0_15_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[60]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[61]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[62]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[63]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[64]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a8]">GPIO6_7_8_9_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[34]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6f]">GPT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[70]">GPT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[32]">KPP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[35]">LCDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c5]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[27]">LPI2C1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c6]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[28]">LPI2C2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c7]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[29]">LPI2C3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c8]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2a]">LPI2C4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c9]">LPSPI1_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2b]">LPSPI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ca]">LPSPI2_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2c]">LPSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cb]">LPSPI3_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2d]">LPSPI3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cc]">LPSPI4_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2e]">LPSPI4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bd]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1f]">LPUART1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[be]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[20]">LPUART2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bf]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[21]">LPUART3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c0]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[22]">LPUART4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c1]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[23]">LPUART5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c2]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[24]">LPUART6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c3]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[25]">LPUART7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c4]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[26]">LPUART8_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e3]">LPUART_TransferHandleIRQ</a> from fsl_lpuart.o(.text.LPUART_TransferHandleIRQ) referenced 2 times from fsl_lpuart.o(.text.LPUART_TransferCreateHandle)
 <LI><a href="#[4]">MemManage_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from common.o(.text.NMI_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[85]">PIT_IRQHandler</a> from isr.o(.text.PIT_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[48]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[71]">PWM1_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[72]">PWM1_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[73]">PWM1_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[74]">PWM1_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[75]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[94]">PWM2_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[95]">PWM2_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[96]">PWM2_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[97]">PWM2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[98]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[99]">PWM3_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9a]">PWM3_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9b]">PWM3_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9c]">PWM3_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9d]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9e]">PWM4_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9f]">PWM4_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a0]">PWM4_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a1]">PWM4_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a2]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[37]">PXP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[68]">RTWDOG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6e]">Reserved115_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8a]">Reserved143_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8b]">Reserved144_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a6]">Reserved171_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3f]">Reserved68_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[49]">Reserved78_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[51]">Reserved86_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[52]">Reserved87_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cf]">SAI1_DriverIRQHandler</a> from fsl_sai.o(.text.SAI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[43]">SAI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d0]">SAI2_DriverIRQHandler</a> from fsl_sai.o(.text.SAI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[44]">SAI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d1]">SAI3_RX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_RX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[45]">SAI3_RX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d2]">SAI3_TX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_TX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[46]">SAI3_TX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[78]">SEMC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[41]">SJC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[39]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3a]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3b]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d3]">SPDIF_DriverIRQHandler</a> from fsl_spdif.o(.text.SPDIF_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[47]">SPDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6d]">SRC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from common.o(.text.SVC_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[aa]">SystemInit</a> from system_mimxrt1064.o(.text.SystemInit) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4a]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4b]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[90]">TMR1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[91]">TMR2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[92]">TMR3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[93]">TMR4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[40]">TRNG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[33]">TSC_DIG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7c]">USB_OTG1_IRQHandler</a> from zf_usb_cdc.o(.text.USB_OTG1_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7b]">USB_OTG2_IRQHandler</a> from zf_usb_cdc.o(.text.USB_OTG2_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4c]">USB_PHY1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4d]">USB_PHY2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d8]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[79]">USDHC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d9]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7a]">USDHC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from common.o(.text.UsageFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[67]">WDOG1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[38]">WDOG2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7f]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[80]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ab]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[f5]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[e7]">button_entry</a> from button.o(.text.button_entry) referenced 2 times from button.o(.text.button_init)
 <LI><a href="#[e8]">buzzer_entry</a> from buzzer.o(.text.buzzer_entry) referenced 2 times from buzzer.o(.text.buzzer_thread_init)
 <LI><a href="#[f2]">carry_image</a> from server.o(.text.carry_image) referenced 2 times from server.o(.text.server3_thread_init)
 <LI><a href="#[100]">clear</a> from cmd.o(.text.clear) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[10e]">cmd_free</a> from msh.o(.text.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[10d]">cmd_ps</a> from msh.o(.text.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[f9]">communication_init</a> from system.o(.text.communication_init) referenced from main.o(.rti_fn.6)
 <LI><a href="#[ec]">csi_isr</a> from seekfree_mt9v03x_csi.o(.text.csi_isr) referenced 2 times from seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
 <LI><a href="#[eb]">csi_mt9v03x_uart_callback</a> from seekfree_mt9v03x_csi.o(.text.csi_mt9v03x_uart_callback) referenced 2 times from seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
 <LI><a href="#[e9]">display_entry</a> from display.o(.text.display_entry) referenced 2 times from display.o(.text.display_thread_init)
 <LI><a href="#[e6]">example_uart1_callback</a> from board.o(.text.example_uart1_callback) referenced 2 times from board.o(.text.board_init)
 <LI><a href="#[fd]">finsh_system_init</a> from shell.o(.text.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[ea]">finsh_thread_entry</a> from shell.o(.text.finsh_thread_entry) referenced 2 times from shell.o(.text.finsh_system_init)
 <LI><a href="#[fb]">hardware_init</a> from system.o(.text.hardware_init) referenced from main.o(.rti_fn.6)
 <LI><a href="#[ff]">hello</a> from cmd.o(.text.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[10b]">list</a> from cmd.o(.text.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[104]">list_event</a> from cmd.o(.text.list_event) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[106]">list_mailbox</a> from cmd.o(.text.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[108]">list_memheap</a> from cmd.o(.text.list_memheap) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[109]">list_mempool</a> from cmd.o(.text.list_mempool) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[107]">list_msgqueue</a> from cmd.o(.text.list_msgqueue) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[105]">list_mutex</a> from cmd.o(.text.list_mutex) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[103]">list_sem</a> from cmd.o(.text.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[102]">list_thread</a> from cmd.o(.text.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[10a]">list_timer</a> from cmd.o(.text.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[a9]">main</a> from components.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[ee]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rt_application_init)
 <LI><a href="#[10c]">msh_help</a> from msh.o(.text.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[ed]">openart_uart1_callback</a> from openart_mini.o(.text.openart_uart1_callback) referenced 2 times from openart_mini.o(.text.openart_mini_init)
 <LI><a href="#[e4]">rt_thread_exit</a> from thread.o(.text.rt_thread_exit) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[ef]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[e5]">rt_thread_timeout</a> from thread.o(.text.rt_thread_timeout) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[f8]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[f7]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[fe]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[f6]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[f1]">run_control</a> from server.o(.text.run_control) referenced 2 times from server.o(.text.server2_thread_init)
 <LI><a href="#[f0]">server_find_dot</a> from server.o(.text.server_find_dot) referenced 2 times from server.o(.text.server1_thread_init)
 <LI><a href="#[fa]">thread_init</a> from system.o(.text.thread_init) referenced from main.o(.rti_fn.6)
 <LI><a href="#[f4]">timer1_pit_entry</a> from timer_pit.o(.text.timer1_pit_entry) referenced 2 times from timer_pit.o(.text.timer1_pit_init)
 <LI><a href="#[fc]">timer_init</a> from system.o(.text.timer_init) referenced from main.o(.rti_fn.6)
 <LI><a href="#[101]">version</a> from cmd.o(.text.version) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[f3]">visual_pursit</a> from server.o(.text.visual_pursit) referenced 2 times from server.o(.text.server4_thread_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ab]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[324]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[320]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[322]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[325]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[326]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[327]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[328]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[329]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FLEXSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>ENET2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>ENET2_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>CAN3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>FLEXIO3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 5]<UL><LI> fsl_flexcan.o(.data.s_flexcanIsr)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> fsl_usdhc.o(.data.s_usdhcIsr)
<LI> startup_mimxrt1064.o(RESET)
<LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>ENC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>ENC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>ENET2_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>FLEXSPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>GPIO6_7_8_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PXP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>Reserved171_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SJC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[321]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[32a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>SystemInit</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, system_mimxrt1064.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[323]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1064.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[32c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[32d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[232]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[23d]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[2db]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2dc]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2e6]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[32e]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[32f]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_OpenartMessage
</UL>

<P><STRONG><a name="[270]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[331]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistEqImageConvert
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Otsu_threshold
</UL>

<P><STRONG><a name="[333]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetDefaultConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[269]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[27d]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_OpenartMessage
</UL>

<P><STRONG><a name="[266]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[20a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_OpenartMessage
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[300]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[268]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[294]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>

<P><STRONG><a name="[2b5]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_dot
</UL>

<P><STRONG><a name="[117]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_dot
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[334]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[335]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[336]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[337]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[31a]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[338]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[31c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[339]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[11e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[127]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[33a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; board_init &rArr; uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[129]"></a>AngleControl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, control.o(.text.AngleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AngleControl &rArr; CarPostureCal &rArr; get_icm20602_gyro_spi &rArr; icm_spi_r_reg_bytes &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarPostureCal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleControlCal
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_entry
</UL>

<P><STRONG><a name="[12c]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1516 bytes, Stack size 48 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitVideoPll
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetXtalFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRtcXtalFreq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[13b]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 614 bytes, Stack size 32 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BOARD_ConfigMPU &rArr; ARM_MPU_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[13e]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMux
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[143]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, board.o(.text.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[145]"></a>BinaryRenew_thread_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, image.o(.text.BinaryRenew_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = BinaryRenew_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[e0]"></a>Binary_entry</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, image.o(.text.Binary_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Binary_entry &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.text.BinaryRenew_thread_init)
</UL>
<P><STRONG><a name="[2a0]"></a>Binary_image</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, image.o(.text.Binary_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Binary_image
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[14a]"></a>Binary_renew</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, image.o(.text.Binary_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 4224<LI>Call Chain = Binary_renew &rArr; Binary_threshold &rArr; HistEqImageConvert
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Compensate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = CAN1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = CAN2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>CAN3_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.CAN3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = CAN3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[137]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[138]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[136]"></a>CLOCK_DeinitVideoPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitVideoPll))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[166]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[168]"></a>CLOCK_GetFreq</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRtcFreq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[16a]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[16b]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[140]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 1092 bytes, Stack size 80 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllEnabled
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllBypassed
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[169]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[16f]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[16e]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[133]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitArmPll
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12f]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[130]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[131]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SwitchOsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SwitchOsc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[180]"></a>CSI_ClearFifo</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, fsl_csi.o(.text.CSI_ClearFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSI_ClearFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
</UL>

<P><STRONG><a name="[17a]"></a>CSI_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_csi.o(.text.CSI_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>CSI_EnableFifoDmaRequest</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, fsl_csi.o(.text.CSI_EnableFifoDmaRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CSI_EnableFifoDmaRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Stop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
</UL>

<P><STRONG><a name="[18c]"></a>CSI_EnableInterrupts</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_csi.o(.text.CSI_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
</UL>

<P><STRONG><a name="[177]"></a>CSI_GetDefaultConfig</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, fsl_csi.o(.text.CSI_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = CSI_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[36]"></a>CSI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(.text.CSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSI_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>CSI_Init</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, fsl_csi.o(.text.CSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = CSI_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetInstance
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[17e]"></a>CSI_ReflashFifoDma</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, fsl_csi.o(.text.CSI_ReflashFifoDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CSI_ReflashFifoDma
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[17d]"></a>CSI_Reset</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_csi.o(.text.CSI_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CSI_Reset &rArr; CSI_Stop &rArr; CSI_EnableFifoDmaRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ClearFifo
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[18a]"></a>CSI_SetRxBufferAddr</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fsl_csi.o(.text.CSI_SetRxBufferAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CSI_SetRxBufferAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
</UL>

<P><STRONG><a name="[183]"></a>CSI_TransferCreateHandle</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, fsl_csi.o(.text.CSI_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = CSI_TransferCreateHandle &rArr; CSI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetInstance
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[187]"></a>CSI_TransferGetFullBuffer</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, fsl_csi.o(.text.CSI_TransferGetFullBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CSI_TransferGetFullBuffer &rArr; CSI_TransferIncreaseQueueIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_get_full_buffer
</UL>

<P><STRONG><a name="[e1]"></a>CSI_TransferHandleIRQ</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, fsl_csi.o(.text.CSI_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CSI_TransferHandleIRQ &rArr; CSI_TransferLoadBufferToDevice &rArr; CSI_SetRxBufferAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Stop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_csi.o(.text.CSI_TransferCreateHandle)
</UL>
<P><STRONG><a name="[18b]"></a>CSI_TransferStart</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fsl_csi.o(.text.CSI_TransferStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CSI_TransferStart &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_EnableInterrupts
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_start
</UL>

<P><STRONG><a name="[18d]"></a>CSI_TransferSubmitEmptyBuffer</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, fsl_csi.o(.text.CSI_TransferSubmitEmptyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CSI_TransferSubmitEmptyBuffer &rArr; CSI_TransferLoadBufferToDevice &rArr; CSI_SetRxBufferAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_ReflashFifoDma
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetQueueDelta
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
</UL>

<P><STRONG><a name="[18e]"></a>CarInformation_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(.text.CarInformation_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CarInformation_init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSettingsInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarInfoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[309]"></a>CorrectControl</STRONG> (Thumb, 404 bytes, Stack size 4 bytes, control.o(.text.CorrectControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CorrectControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_entry
</UL>

<P><STRONG><a name="[ac]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>DbgConsole_Init</STRONG> (Thumb, 374 bytes, Stack size 104 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[19c]"></a>DbgConsole_Printf</STRONG> (Thumb, 110 bytes, Stack size 176 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[19b]"></a>DbgConsole_SendDataReliable</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, fsl_debug_console.o(.text.DbgConsole_SendDataReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[196]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_edma.o(.text.EDMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = EDMA_GetChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[197]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>ENET2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ENET2_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_1588_Timer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_1588_Timer_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, fsl_enet.o(.text.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET2_DriverIRQHandler
</UL>

<P><STRONG><a name="[da]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1a0]"></a>ENET_GetInstance</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>EncoderPulseGet</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, encoder.o(.text.EncoderPulseGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EncoderPulseGet &rArr; qtimer_quad_get &rArr; QTMR_GetCurrentTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorSpeed
</UL>

<P><STRONG><a name="[d4]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO1_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO2_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>FLEXIO3_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO3_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1a8]"></a>FLEXIO_CAMERA_ClearStatusFlags</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, fsl_flexio_camera.o(.text.FLEXIO_CAMERA_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_ClearShifterStatusFlags
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_ClearShifterErrorFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexio_flag_clear
</UL>

<P><STRONG><a name="[1a7]"></a>FLEXIO_CommonIRQHandler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, fsl_flexio.o(.text.FLEXIO_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXIO_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO3_DriverIRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO2_DriverIRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO1_DriverIRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, isr.o(.text.GPIO2_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIO2_Combined_0_15_IRQHandler &rArr; mt9v03x_vsync &rArr; dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_vsync
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, isr.o(.text.GPIO2_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO2_Combined_16_31_IRQHandler &rArr; GPIO_ClearPinsInterruptFlags &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(.text.GPIO3_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = GPIO3_Combined_0_15_IRQHandler &rArr; GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_NofiyCardInsertStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortGetInterruptFlags
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>GPIO_PinInit</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[1c2]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, fsl_gpio.o(.text.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
</UL>

<P><STRONG><a name="[1be]"></a>GPIO_PinWrite</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fsl_gpio.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[1c5]"></a>GetMotorSpeed</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, control.o(.text.GetMotorSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetMotorSpeed &rArr; EncoderPulseGet &rArr; qtimer_quad_get &rArr; QTMR_GetCurrentTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderPulseGet
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_UartInit</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, lpuart_adapter.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lpuart_adapter.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[14f]"></a>HistEqImageConvert</STRONG> (Thumb, 392 bytes, Stack size 4152 bytes, image.o(.text.HistEqImageConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4152<LI>Call Chain = HistEqImageConvert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_threshold
</UL>

<P><STRONG><a name="[14b]"></a>Image_Compensate</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, image.o(.text.Image_Compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Image_Compensate
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_renew
</UL>

<P><STRONG><a name="[14e]"></a>Iteration_Threshould</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, image.o(.text.Iteration_Threshould))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Iteration_Threshould
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_threshold
</UL>

<P><STRONG><a name="[c5]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LPSPI4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1cf]"></a>LPSPI_CheckTransferArgument</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, fsl_lpspi.o(.text.LPSPI_CheckTransferArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = LPSPI_CheckTransferArgument &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1d2]"></a>LPSPI_GetInstance</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = LPSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetDummyData
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1d3]"></a>LPSPI_MasterGetDefaultConfig</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fsl_lpspi.o(.text.LPSPI_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = LPSPI_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1d4]"></a>LPSPI_MasterInit</STRONG> (Thumb, 334 bytes, Stack size 64 bytes, fsl_lpspi.o(.text.LPSPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = LPSPI_MasterInit &rArr; LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetDummyData
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetBaudRate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetOnePcsPolarity
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetMasterSlaveMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetFifoWatermarks
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1d7]"></a>LPSPI_MasterSetBaudRate</STRONG> (Thumb, 322 bytes, Stack size 96 bytes, fsl_lpspi.o(.text.LPSPI_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = LPSPI_MasterSetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1dc]"></a>LPSPI_MasterSetDelayScaler</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fsl_lpspi.o(.text.LPSPI_MasterSetDelayScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
</UL>

<P><STRONG><a name="[1da]"></a>LPSPI_MasterSetDelayTimes</STRONG> (Thumb, 508 bytes, Stack size 144 bytes, fsl_lpspi.o(.text.LPSPI_MasterSetDelayTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayScaler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1dd]"></a>LPSPI_MasterTransferBlocking</STRONG> (Thumb, 852 bytes, Stack size 96 bytes, fsl_lpspi.o(.text.LPSPI_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_WriteData
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ReadData
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetTxFifoCount
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetStatusFlags
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoSize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoCount
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_FlushFifo
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>

<P><STRONG><a name="[303]"></a>LPSPI_Reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1db]"></a>LPSPI_SetDummyData</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, fsl_lpspi.o(.text.LPSPI_SetDummyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = LPSPI_SetDummyData &rArr; LPSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[bd]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART1_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART2_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART3_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART4_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART5_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART6_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART7_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART8_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1e7]"></a>LPUART_Deinit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.LPUART_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = LPUART_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1ef]"></a>LPUART_DisableInterrupts</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1f2]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1c7]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[1ee]"></a>LPUART_GetEnabledInterrupts</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, fsl_lpuart.o(.text.LPUART_GetEnabledInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPUART_GetEnabledInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1e8]"></a>LPUART_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
</UL>

<P><STRONG><a name="[1ed]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1c8]"></a>LPUART_Init</STRONG> (Thumb, 912 bytes, Stack size 80 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SoftwareReset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[1eb]"></a>LPUART_TransferCreateHandle</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, fsl_lpuart.o(.text.LPUART_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = LPUART_TransferCreateHandle &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
</UL>

<P><STRONG><a name="[1ec]"></a>LPUART_TransferGetRxRingBufferLength</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, fsl_lpuart.o(.text.LPUART_TransferGetRxRingBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
</UL>

<P><STRONG><a name="[e3]"></a>LPUART_TransferHandleIRQ</STRONG> (Thumb, 1244 bytes, Stack size 120 bytes, fsl_lpuart.o(.text.LPUART_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = LPUART_TransferHandleIRQ &rArr; LPUART_TransferIsRxRingBufferFull &rArr; LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetEnabledInterrupts
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteNonBlocking
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadNonBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_lpuart.o(.text.LPUART_TransferCreateHandle)
</UL>
<P><STRONG><a name="[1cb]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>

<P><STRONG><a name="[1f5]"></a>MotorStopped</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, motor.o(.text.MotorStopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = MotorStopped &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_control
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_flag
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1f7]"></a>PIT_Deinit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_pit.o(.text.PIT_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = PIT_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[85]"></a>PIT_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, isr.o(.text.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PIT_IRQHandler &rArr; PIT_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetStatusFlags
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1fc]"></a>PIT_Init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fsl_pit.o(.text.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = PIT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[1fd]"></a>PWM_Deinit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_pwm.o(.text.PWM_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = PWM_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1ff]"></a>PWM_GetDefaultConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_pwm.o(.text.PWM_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = PWM_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[200]"></a>PWM_Init</STRONG> (Thumb, 654 bytes, Stack size 48 bytes, fsl_pwm.o(.text.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = PWM_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[201]"></a>PWM_SetupPwm</STRONG> (Thumb, 1452 bytes, Stack size 96 bytes, fsl_pwm.o(.text.PWM_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = PWM_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetComplementU16
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[203]"></a>PWM_UpdatePwmDutycycle</STRONG> (Thumb, 928 bytes, Stack size 64 bytes, fsl_pwm.o(.text.PWM_UpdatePwmDutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetComplementU16
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>

<P><STRONG><a name="[308]"></a>PositionControl</STRONG> (Thumb, 540 bytes, Stack size 8 bytes, control.o(.text.PositionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PositionControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_entry
</UL>

<P><STRONG><a name="[204]"></a>QTMR_Deinit</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_qtmr.o(.text.QTMR_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = QTMR_Deinit &rArr; CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[206]"></a>QTMR_GetDefaultConfig</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fsl_qtmr.o(.text.QTMR_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = QTMR_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[207]"></a>QTMR_Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, fsl_qtmr.o(.text.QTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = QTMR_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[208]"></a>Report</STRONG> (Thumb, 346 bytes, Stack size 200 bytes, communicate.o(.text.Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = Report &rArr; seekfree_wireless_send_buff &rArr; gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_send_buff
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_entry
</UL>

<P><STRONG><a name="[cf]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAI1_DriverIRQHandler &rArr; SAI_TxGetEnabledInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxGetEnabledInterruptStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAI2_DriverIRQHandler &rArr; SAI_TxGetEnabledInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxGetEnabledInterruptStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI3_RX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SAI3_RX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI3_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SAI3_TX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[1b3]"></a>SDMMCEVENT_Notify</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_sdmmc_event.o(.text.SDMMCEVENT_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMCEVENT_Notify &rArr; SDMMCEVENT_GetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPDIF_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[20f]"></a>SendCommand</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, openart_mini.o(.text.SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendCommand &rArr; uart_putchar &rArr; LPUART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_uart1_callback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[198]"></a>SerialManager_Init</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, serial_manager.o(.text.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[19a]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, serial_manager.o(.text.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[199]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, serial_manager.o(.text.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[19e]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, serial_manager.o(.text.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[211]"></a>Serial_UartInit</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, serial_port_uart.o(.text.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[215]"></a>Serial_UartWrite</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, serial_port_uart.o(.text.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[217]"></a>SpeedControl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, control.o(.text.SpeedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = SpeedControl &rArr; MotorControlOut &rArr; motor_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorSpeed
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speedmath
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlCal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControlOut
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_entry
</UL>

<P><STRONG><a name="[19d]"></a>StrFormatPrintf</STRONG> (Thumb, 2810 bytes, Stack size 352 bytes, fsl_str.o(.text.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_tick_handler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[225]"></a>USB_DeviceEhciIsrFunction</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usb_device_ehci.o(.text.USB_DeviceEhciIsrFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptSof
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptReset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptPortChange
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG2_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG1_IRQHandler
</UL>

<P><STRONG><a name="[220]"></a>USB_DeviceNotificationTrigger</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, usb_device_dci.o(.text.USB_DeviceNotificationTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptReset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptPortChange
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>

<P><STRONG><a name="[7c]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zf_usb_cdc.o(.text.USB_OTG1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USB_OTG1_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zf_usb_cdc.o(.text.USB_OTG2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USB_OTG2_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>__aeabi_assert</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetDefaultConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetInstance
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_DriverIRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DriverIRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayScaler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetBaudRate
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferGetRxRingBufferLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteNonBlocking
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadNonBlocking
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReadPadStatus
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetDefaultConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[22b]"></a>__rt_ffs</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>

<P><STRONG><a name="[240]"></a>board_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, board.o(.text.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3368<LI>Call Chain = board_init &rArr; uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[e7]"></a>button_entry</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, button.o(.text.button_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = button_entry &rArr; gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text.button_init)
</UL>
<P><STRONG><a name="[249]"></a>button_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, button.o(.text.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = button_init &rArr; gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[e8]"></a>buzzer_entry</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, buzzer.o(.text.buzzer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = buzzer_entry &rArr; rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.text.buzzer_thread_init)
</UL>
<P><STRONG><a name="[24f]"></a>buzzer_thread_init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, buzzer.o(.text.buzzer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = buzzer_thread_init &rArr; gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[f2]"></a>carry_image</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, server.o(.text.carry_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = carry_image &rArr; smotor_up &rArr; smotor1_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor_up
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor_down
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renew_Carpulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text.server3_thread_init)
</UL>
<P><STRONG><a name="[10e]"></a>cmd_free</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, msh.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = cmd_free &rArr; list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[10d]"></a>cmd_ps</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, msh.o(.text.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[f9]"></a>communication_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, system.o(.text.communication_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = communication_init &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[256]"></a>csi_add_empty_buffer</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, zf_csi.o(.text.csi_add_empty_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = csi_add_empty_buffer &rArr; CSI_TransferSubmitEmptyBuffer &rArr; CSI_TransferLoadBufferToDevice &rArr; CSI_SetRxBufferAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
</UL>

<P><STRONG><a name="[257]"></a>csi_get_full_buffer</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, zf_csi.o(.text.csi_get_full_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = csi_get_full_buffer &rArr; CSI_TransferGetFullBuffer &rArr; CSI_TransferIncreaseQueueIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetFullBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
</UL>

<P><STRONG><a name="[258]"></a>csi_init</STRONG> (Thumb, 534 bytes, Stack size 104 bytes, zf_csi.o(.text.csi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352<LI>Call Chain = csi_init &rArr; csi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetDefaultConfig
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_iomuxc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[259]"></a>csi_iomuxc</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, zf_csi.o(.text.csi_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = csi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[ec]"></a>csi_isr</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, seekfree_mt9v03x_csi.o(.text.csi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = csi_isr &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_get_full_buffer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
</UL>
<P><STRONG><a name="[eb]"></a>csi_mt9v03x_uart_callback</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, seekfree_mt9v03x_csi.o(.text.csi_mt9v03x_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = csi_mt9v03x_uart_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
</UL>
<P><STRONG><a name="[25c]"></a>csi_start</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, zf_csi.o(.text.csi_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = csi_start &rArr; CSI_TransferStart &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[e9]"></a>display_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, display.o(.text.display_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = display_entry &rArr; ips114_displayimage032_zoom &rArr; ips114_set_region &rArr; ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_displayimage032_zoom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text.display_thread_init)
</UL>
<P><STRONG><a name="[25e]"></a>display_thread_init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, display.o(.text.display_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496<LI>Call Chain = display_thread_init &rArr; ips114_init &rArr; spi_init &rArr; spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[261]"></a>dma_restart</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, zf_camera.o(.text.dma_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_vsync
</UL>

<P><STRONG><a name="[263]"></a>encoder_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, encoder.o(.text.encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344<LI>Call Chain = encoder_init &rArr; qtimer_quad_init &rArr; qtimer_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[e6]"></a>example_uart1_callback</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, board.o(.text.example_uart1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = example_uart1_callback &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text.board_init)
</UL>
<P><STRONG><a name="[2a1]"></a>find_barycen</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, image.o(.text.find_barycen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_barycen
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[265]"></a>finsh_get_prompt</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, shell.o(.text.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = finsh_get_prompt &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[26c]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, shell.o(.text.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[26d]"></a>finsh_system_function_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(.text.finsh_system_function_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_system_function_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[fd]"></a>finsh_system_init</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, shell.o(.text.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[ea]"></a>finsh_thread_entry</STRONG> (Thumb, 1588 bytes, Stack size 104 bytes, shell.o(.text.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = finsh_thread_entry &rArr; finsh_getchar &rArr; rt_hw_console_getchar &rArr; rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_system_init)
</UL>
<P><STRONG><a name="[262]"></a>flexio_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zf_camera.o(.text.flexio_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
</UL>

<P><STRONG><a name="[276]"></a>get_config</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, seekfree_mt9v03x.o(.text.get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_config &rArr; uart_putbuff &rArr; LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[191]"></a>get_icm20602_gyro_spi</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, seekfree_icm20602.o(.text.get_icm20602_gyro_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = get_icm20602_gyro_spi &rArr; icm_spi_r_reg_bytes &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarPostureCal
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset_init
</UL>

<P><STRONG><a name="[246]"></a>gpio_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, zf_gpio.o(.text.gpio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_send_buff
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_entry
</UL>

<P><STRONG><a name="[24a]"></a>gpio_init</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, zf_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_thread_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[24e]"></a>gpio_set</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, zf_gpio.o(.text.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpio_set &rArr; GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writeIndex
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writeData
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_entry
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry_image
</UL>

<P><STRONG><a name="[279]"></a>gyro_offset_init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, system.o(.text.gyro_offset_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = gyro_offset_init &rArr; get_icm20602_gyro_spi &rArr; icm_spi_r_reg_bytes &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[27b]"></a>handle_OpenartMessage</STRONG> (Thumb, 478 bytes, Stack size 160 bytes, openart_mini.o(.text.handle_OpenartMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = handle_OpenartMessage &rArr; seekfree_wireless_send_buff &rArr; gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_send_buff
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_uart1_callback
</UL>

<P><STRONG><a name="[fb]"></a>hardware_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, system.o(.text.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424<LI>Call Chain = hardware_init &rArr; icm20602_init_spi &rArr; spi_init &rArr; spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_mini_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[ff]"></a>hello</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmd.o(.text.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[282]"></a>icm20602_init_spi</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, seekfree_icm20602.o(.text.icm20602_init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = icm20602_init_spi &rArr; spi_init &rArr; spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_w_reg_byte
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_byte
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self3_check
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[288]"></a>icm20602_self3_check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, seekfree_icm20602.o(.text.icm20602_self3_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = icm20602_self3_check &rArr; icm_spi_r_reg_byte &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[28a]"></a>icm_spi_r_reg_byte</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, seekfree_icm20602.o(.text.icm_spi_r_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = icm_spi_r_reg_byte &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self3_check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[278]"></a>icm_spi_r_reg_bytes</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, seekfree_icm20602.o(.text.icm_spi_r_reg_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = icm_spi_r_reg_bytes &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
</UL>

<P><STRONG><a name="[289]"></a>icm_spi_w_reg_byte</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, seekfree_icm20602.o(.text.icm_spi_w_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = icm_spi_w_reg_byte &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[25b]"></a>iomuxc_pinconf</STRONG> (Thumb, 40444 bytes, Stack size 2248 bytes, zf_iomuxc.o(.text.iomuxc_pinconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216<LI>Call Chain = iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_iomuxc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
</UL>

<P><STRONG><a name="[28e]"></a>ips114_clear</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, seekfree_ips114_spi.o(.text.ips114_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = ips114_clear &rArr; ips114_set_region &rArr; ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[25d]"></a>ips114_displayimage032_zoom</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, seekfree_ips114_spi.o(.text.ips114_displayimage032_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = ips114_displayimage032_zoom &rArr; ips114_set_region &rArr; ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_entry
</UL>

<P><STRONG><a name="[25f]"></a>ips114_init</STRONG> (Thumb, 524 bytes, Stack size 88 bytes, seekfree_ips114_spi.o(.text.ips114_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = ips114_init &rArr; spi_init &rArr; spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writeIndex
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writeData
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread_init
</UL>

<P><STRONG><a name="[28f]"></a>ips114_set_region</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, seekfree_ips114_spi.o(.text.ips114_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = ips114_set_region &rArr; ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writeIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_displayimage032_zoom
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
</UL>

<P><STRONG><a name="[293]"></a>ips114_showchar</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, seekfree_ips114_spi.o(.text.ips114_showchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ips114_showchar &rArr; ips114_set_region &rArr; ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
</UL>

<P><STRONG><a name="[260]"></a>ips114_showstr</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, seekfree_ips114_spi.o(.text.ips114_showstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = ips114_showstr &rArr; ips114_showchar &rArr; ips114_set_region &rArr; ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread_init
</UL>

<P><STRONG><a name="[292]"></a>ips114_writeData</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, seekfree_ips114_spi.o(.text.ips114_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ips114_writeData &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[291]"></a>ips114_writeIndex</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, seekfree_ips114_spi.o(.text.ips114_writeIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ips114_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[290]"></a>ips114_writedata_16bit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, seekfree_ips114_spi.o(.text.ips114_writedata_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_displayimage032_zoom
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
</UL>

<P><STRONG><a name="[2a3]"></a>limit</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, seekfree_fun.o(.text.limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = limit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control
</UL>

<P><STRONG><a name="[10b]"></a>list</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cmd.o(.text.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[104]"></a>list_event</STRONG> (Thumb, 296 bytes, Stack size 120 bytes, cmd.o(.text.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[106]"></a>list_mailbox</STRONG> (Thumb, 330 bytes, Stack size 136 bytes, cmd.o(.text.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[108]"></a>list_memheap</STRONG> (Thumb, 226 bytes, Stack size 112 bytes, cmd.o(.text.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[109]"></a>list_mempool</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, cmd.o(.text.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[107]"></a>list_msgqueue</STRONG> (Thumb, 314 bytes, Stack size 128 bytes, cmd.o(.text.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[105]"></a>list_mutex</STRONG> (Thumb, 246 bytes, Stack size 128 bytes, cmd.o(.text.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[103]"></a>list_sem</STRONG> (Thumb, 314 bytes, Stack size 128 bytes, cmd.o(.text.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[102]"></a>list_thread</STRONG> (Thumb, 470 bytes, Stack size 248 bytes, cmd.o(.text.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10a]"></a>list_timer</STRONG> (Thumb, 280 bytes, Stack size 112 bytes, cmd.o(.text.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[29d]"></a>$Super$$main</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = $Super$$main &rArr; Binary_renew &rArr; Binary_threshold &rArr; HistEqImageConvert
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_barycen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStopped
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarInformation_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_renew
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_image
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[ee]"></a>main_thread_entry</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; Binary_renew &rArr; Binary_threshold &rArr; HistEqImageConvert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[1f4]"></a>motor_control</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, motor.o(.text.motor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = motor_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControlOut
</UL>

<P><STRONG><a name="[2a4]"></a>motor_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, motor.o(.text.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = motor_init &rArr; pwm_init &rArr; pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[2a6]"></a>msh_auto_complete</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, msh.o(.text.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[275]"></a>msh_exec</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, msh.o(.text.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[10c]"></a>msh_help</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, msh.o(.text.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[267]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(.text.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[283]"></a>mt9v03x_csi_init</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = mt9v03x_csi_init &rArr; csi_init &rArr; csi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_start
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[1ac]"></a>mt9v03x_vsync</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, seekfree_mt9v03x.o(.text.mt9v03x_vsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mt9v03x_vsync &rArr; dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[284]"></a>openart_mini_init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, openart_mini.o(.text.openart_mini_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3368<LI>Call Chain = openart_mini_init &rArr; uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[ed]"></a>openart_uart1_callback</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, openart_mini.o(.text.openart_uart1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = openart_uart1_callback &rArr; handle_OpenartMessage &rArr; seekfree_wireless_send_buff &rArr; gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_dot
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_OpenartMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openart_mini.o(.text.openart_mini_init)
</UL>
<P><STRONG><a name="[29e]"></a>pit_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, zf_pit.o(.text.pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = pit_init &rArr; PIT_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f6]"></a>pwm_duty</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, zf_pwm.o(.text.pwm_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStopped
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor1_control
</UL>

<P><STRONG><a name="[2a5]"></a>pwm_init</STRONG> (Thumb, 760 bytes, Stack size 128 bytes, zf_pwm.o(.text.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3368<LI>Call Chain = pwm_init &rArr; pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartTimer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor_init
</UL>

<P><STRONG><a name="[2b0]"></a>pwm_iomuxc</STRONG> (Thumb, 1256 bytes, Stack size 24 bytes, zf_pwm.o(.text.pwm_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[2b2]"></a>qtimer_iomuxc</STRONG> (Thumb, 1952 bytes, Stack size 64 bytes, zf_qtimer.o(.text.qtimer_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3280<LI>Call Chain = qtimer_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[1a6]"></a>qtimer_quad_clear</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, zf_qtimer.o(.text.qtimer_quad_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qtimer_quad_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderPulseGet
</UL>

<P><STRONG><a name="[1a5]"></a>qtimer_quad_get</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, zf_qtimer.o(.text.qtimer_quad_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qtimer_quad_get &rArr; QTMR_GetCurrentTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetCurrentTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderPulseGet
</UL>

<P><STRONG><a name="[264]"></a>qtimer_quad_init</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, zf_qtimer.o(.text.qtimer_quad_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3328<LI>Call Chain = qtimer_quad_init &rArr; qtimer_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Deinit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
</UL>

<P><STRONG><a name="[2ac]"></a>receive_dot</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, openart_mini.o(.text.receive_dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = receive_dot &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_uart1_callback
</UL>

<P><STRONG><a name="[2b6]"></a>rt_application_init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[22d]"></a>rt_assert_handler</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, kservice.o(.text.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[26e]"></a>rt_calloc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, memheap.o(.text.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2c8]"></a>rt_components_board_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2a2]"></a>rt_components_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[2b8]"></a>rt_enter_critical</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[254]"></a>rt_event_create</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ipc.o(.text.rt_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
</UL>

<P><STRONG><a name="[251]"></a>rt_event_recv</STRONG> (Thumb, 732 bytes, Stack size 112 bytes, ipc.o(.text.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_event_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry_image
</UL>

<P><STRONG><a name="[27e]"></a>rt_event_send</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, ipc.o(.text.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_event_send &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_OpenartMessage
</UL>

<P><STRONG><a name="[2c3]"></a>rt_exit_critical</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[2c4]"></a>rt_free</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, memheap.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[2c6]"></a>rt_hw_board_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384<LI>Call Chain = rt_hw_board_init &rArr; board_init &rArr; uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[26b]"></a>rt_hw_console_getchar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, board.o(.text.rt_hw_console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_hw_console_getchar &rArr; rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[2c9]"></a>rt_hw_console_output</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, board.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_hw_console_output &rArr; uart_putchar &rArr; LPUART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[10f]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[236]"></a>rt_hw_stack_init</STRONG> (Thumb, 150 bytes, Stack size 60 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[179]"></a>rt_interrupt_enter</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART8_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART7_DriverIRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART6_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_DriverIRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_DriverIRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_DriverIRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_DriverIRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[2b9]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[17b]"></a>rt_interrupt_leave</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART8_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART7_DriverIRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART6_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_DriverIRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_DriverIRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_DriverIRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_DriverIRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>rt_kprintf</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_OpenartMessage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
</UL>

<P><STRONG><a name="[2b7]"></a>rt_malloc</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, memheap.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[250]"></a>rt_mb_create</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, ipc.o(.text.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_thread_init
</UL>

<P><STRONG><a name="[24d]"></a>rt_mb_recv</STRONG> (Thumb, 744 bytes, Stack size 96 bytes, ipc.o(.text.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_entry
</UL>

<P><STRONG><a name="[248]"></a>rt_mb_send</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipc.o(.text.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_uart1_callback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_entry
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_pursit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_control
</UL>

<P><STRONG><a name="[2d1]"></a>rt_mb_send_wait</STRONG> (Thumb, 670 bytes, Stack size 88 bytes, ipc.o(.text.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[2cf]"></a>rt_memheap_alloc</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, memheap.o(.text.rt_memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[2c5]"></a>rt_memheap_free</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, memheap.o(.text.rt_memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2d3]"></a>rt_memheap_init</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, memheap.o(.text.rt_memheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[273]"></a>rt_memmove</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, kservice.o(.text.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[235]"></a>rt_memset</STRONG> (Thumb, 200 bytes, Stack size 52 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2ba]"></a>rt_object_allocate</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>

<P><STRONG><a name="[2d0]"></a>rt_object_delete</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2d7]"></a>rt_object_detach</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[29b]"></a>rt_object_get_information</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[2bd]"></a>rt_object_get_type</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, object.o(.text.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[2d4]"></a>rt_object_init</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[2d8]"></a>rt_object_is_systemobject</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2c0]"></a>rt_schedule</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>

<P><STRONG><a name="[2d9]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[2da]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[255]"></a>rt_sem_create</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, ipc.o(.text.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[26f]"></a>rt_sem_init</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[247]"></a>rt_sem_release</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_entry
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_find_dot
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>

<P><STRONG><a name="[149]"></a>rt_sem_take</STRONG> (Thumb, 494 bytes, Stack size 80 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_entry
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_pursit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_find_dot
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_control
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry_image
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>

<P><STRONG><a name="[2d2]"></a>rt_set_errno</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, kservice.o(.text.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>

<P><STRONG><a name="[2e0]"></a>rt_show_version</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[2e1]"></a>rt_sprintf</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, kservice.o(.text.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[2f7]"></a>rt_strlen</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, kservice.o(.text.rt_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2a8]"></a>rt_strncpy</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[2c7]"></a>rt_system_heap_init</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, memheap.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = rt_system_heap_init &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2e3]"></a>rt_system_scheduler_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_system_scheduler_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2e5]"></a>rt_system_scheduler_start</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2e7]"></a>rt_system_timer_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_system_timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2f8]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[146]"></a>rt_thread_create</STRONG> (Thumb, 150 bytes, Stack size 96 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_thread_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server4_thread_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server3_thread_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server2_thread_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server1_thread_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryRenew_thread_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[e4]"></a>rt_thread_exit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[2ea]"></a>rt_thread_idle_excute</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[2ed]"></a>rt_thread_idle_init</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2ee]"></a>rt_thread_init</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[148]"></a>rt_thread_mdelay</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_entry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_entry
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_pursit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_find_dot
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_control
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry_image
</UL>

<P><STRONG><a name="[2c2]"></a>rt_thread_resume</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[2bc]"></a>rt_thread_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2f0]"></a>rt_thread_sleep</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, thread.o(.text.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[147]"></a>rt_thread_startup</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_thread_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server4_thread_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server3_thread_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server2_thread_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server1_thread_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryRenew_thread_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2cb]"></a>rt_thread_suspend</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[e5]"></a>rt_thread_timeout</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[2ef]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[29c]"></a>rt_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[21d]"></a>rt_tick_increase</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2f3]"></a>rt_timer_check</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2bf]"></a>rt_timer_control</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[24b]"></a>rt_timer_create</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, timer.o(.text.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_init
</UL>

<P><STRONG><a name="[2e8]"></a>rt_timer_detach</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_timer_detach &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[237]"></a>rt_timer_init</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[24c]"></a>rt_timer_start</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[2f2]"></a>rt_timer_stop</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[2ce]"></a>rt_vsnprintf</STRONG> (Thumb, 1488 bytes, Stack size 104 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[2e2]"></a>rt_vsprintf</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, kservice.o(.text.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[128]"></a>rtthread_startup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; board_init &rArr; uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>run_control</STRONG> (Thumb, 960 bytes, Stack size 64 bytes, server.o(.text.run_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = run_control &rArr; MotorStopped &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStopped
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text.server2_thread_init)
</UL>
<P><STRONG><a name="[1ad]"></a>scc8660_vsync</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, seekfree_scc8660.o(.text.scc8660_vsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scc8660_vsync &rArr; dma_restart &rArr; flexio_flag_clear &rArr; FLEXIO_CAMERA_ClearStatusFlags &rArr; FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>sdmmc_tick_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(.text.sdmmc_tick_handler))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[285]"></a>seekfree_wireless_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, seekfree_wireless.o(.text.seekfree_wireless_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360<LI>Call Chain = seekfree_wireless_init &rArr; uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[20b]"></a>seekfree_wireless_send_buff</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, seekfree_wireless.o(.text.seekfree_wireless_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = seekfree_wireless_send_buff &rArr; gpio_get &rArr; GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_OpenartMessage
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report
</UL>

<P><STRONG><a name="[2f9]"></a>server1_thread_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, server.o(.text.server1_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = server1_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[2fa]"></a>server2_thread_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, server.o(.text.server2_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = server2_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[2fb]"></a>server3_thread_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, server.o(.text.server3_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = server3_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[2fc]"></a>server4_thread_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, server.o(.text.server4_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = server4_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init
</UL>

<P><STRONG><a name="[f0]"></a>server_find_dot</STRONG> (Thumb, 2624 bytes, Stack size 72 bytes, server.o(.text.server_find_dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = server_find_dot &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_dot
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renew_Carpulse
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text.server1_thread_init)
</UL>
<P><STRONG><a name="[2a9]"></a>set_config</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, seekfree_mt9v03x.o(.text.set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = set_config &rArr; systick_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[301]"></a>smotor1_control</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, smotor.o(.text.smotor1_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = smotor1_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor_up
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor_down
</UL>

<P><STRONG><a name="[252]"></a>smotor_down</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(.text.smotor_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = smotor_down &rArr; smotor1_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor1_control
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry_image
</UL>

<P><STRONG><a name="[286]"></a>smotor_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smotor.o(.text.smotor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376<LI>Call Chain = smotor_init &rArr; pwm_init &rArr; pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[253]"></a>smotor_up</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(.text.smotor_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = smotor_up &rArr; smotor1_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smotor1_control
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry_image
</UL>

<P><STRONG><a name="[287]"></a>spi_init</STRONG> (Thumb, 476 bytes, Stack size 112 bytes, zf_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376<LI>Call Chain = spi_init &rArr; spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Reset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_FlushFifo
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DisableInterrupts
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlags
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
</UL>

<P><STRONG><a name="[302]"></a>spi_iomuxc</STRONG> (Thumb, 1630 bytes, Stack size 48 bytes, zf_spi.o(.text.spi_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264<LI>Call Chain = spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[28b]"></a>spi_mosi</STRONG> (Thumb, 226 bytes, Stack size 88 bytes, zf_spi.o(.text.spi_mosi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_w_reg_byte
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_bytes
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_byte
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writeIndex
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writeData
</UL>

<P><STRONG><a name="[27a]"></a>systick_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, zf_systick.o(.text.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = systick_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self3_check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset_init
</UL>

<P><STRONG><a name="[fa]"></a>thread_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system.o(.text.thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3504<LI>Call Chain = thread_init &rArr; display_thread_init &rArr; ips114_init &rArr; spi_init &rArr; spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_thread_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server4_thread_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server3_thread_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server2_thread_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server1_thread_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryRenew_thread_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[f4]"></a>timer1_pit_entry</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, timer_pit.o(.text.timer1_pit_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = timer1_pit_entry &rArr; AngleControl &rArr; CarPostureCal &rArr; get_icm20602_gyro_spi &rArr; icm_spi_r_reg_bytes &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionControl
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectControl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_pit.o(.text.timer1_pit_init)
</UL>
<P><STRONG><a name="[30a]"></a>timer1_pit_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timer_pit.o(.text.timer1_pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = timer1_pit_init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[fc]"></a>timer_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = timer_init &rArr; button_init &rArr; gpio_init &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pit_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[241]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, zf_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = uart_init &rArr; uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_mini_init
</UL>

<P><STRONG><a name="[30b]"></a>uart_iomuxc</STRONG> (Thumb, 1016 bytes, Stack size 32 bytes, zf_uart.o(.text.uart_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[277]"></a>uart_putbuff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, zf_uart.o(.text.uart_putbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_putbuff &rArr; LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_send_buff
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
</UL>

<P><STRONG><a name="[210]"></a>uart_putchar</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, zf_uart.o(.text.uart_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_putchar &rArr; LPUART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_entry
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
</UL>

<P><STRONG><a name="[243]"></a>uart_rx_irq</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, zf_uart.o(.text.uart_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_rx_irq &rArr; LPUART_EnableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_mini_init
</UL>

<P><STRONG><a name="[242]"></a>uart_set_handle</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, zf_uart.o(.text.uart_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = uart_set_handle &rArr; LPUART_TransferCreateHandle &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_mini_init
</UL>

<P><STRONG><a name="[101]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[f3]"></a>visual_pursit</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, server.o(.text.visual_pursit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = visual_pursit &rArr; alter_flag &rArr; MotorStopped &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text.server4_thread_init)
</UL>
<P><STRONG><a name="[30d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[33d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[33e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[209]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report
</UL>

<P><STRONG><a name="[310]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[33f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2fe]"></a>__hardfp_atan</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_find_dot
</UL>

<P><STRONG><a name="[193]"></a>__hardfp_modf</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[194]"></a>__hardfp_pow</STRONG> (Thumb, 2108 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Otsu_threshold
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[2ff]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_find_dot
</UL>

<P><STRONG><a name="[313]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[316]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[30f]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[314]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[319]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[317]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[311]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[315]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[312]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[318]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13c]"></a>ARM_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[13d]"></a>ARM_MPU_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(.text.ARM_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[141]"></a>CLOCK_GetDiv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, board.o(.text.CLOCK_GetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[13f]"></a>CLOCK_GetMux</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, board.o(.text.CLOCK_GetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetMux
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[142]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[21b]"></a>SysTick_Config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, board.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[21c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, board.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[244]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, board.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[151]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[13a]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock_config.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[139]"></a>CLOCK_SetDiv</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, clock_config.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[132]"></a>CLOCK_SetMux</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, clock_config.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[135]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, clock_config.o(.text.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_SetPllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12d]"></a>CLOCK_SetRtcXtalFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetRtcXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetRtcXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12e]"></a>CLOCK_SetXtalFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetXtalFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetXtalFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[212]"></a>DisableGlobalIRQ</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, serial_manager.o(.text.DisableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
</UL>

<P><STRONG><a name="[213]"></a>EnableGlobalIRQ</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, serial_manager.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
</UL>

<P><STRONG><a name="[214]"></a>SerialManager_StartWriting</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, serial_manager.o(.text.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[216]"></a>SerialManager_Write</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, serial_manager.o(.text.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_UartGetStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lpuart_adapter.o(.text.HAL_UartGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[16c]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[167]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[170]"></a>CLOCK_GetPllBypassRefClk</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fsl_clock.o(.text.CLOCK_GetPllBypassRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLOCK_GetPllBypassRefClk &rArr; CLOCK_GetOscFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[16d]"></a>CLOCK_GetRtcFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetRtcFreq))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[172]"></a>CLOCK_IsPllBypassed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_IsPllBypassed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_IsPllBypassed
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[171]"></a>CLOCK_IsPllEnabled</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_IsPllEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_IsPllEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[152]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_csi.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[15e]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_csi.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[178]"></a>CSI_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_csi.o(.text.CSI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = CSI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
</UL>

<P><STRONG><a name="[181]"></a>CSI_Start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_csi.o(.text.CSI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CSI_Start &rArr; CSI_EnableFifoDmaRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_EnableFifoDmaRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[17f]"></a>CSI_Stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_csi.o(.text.CSI_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CSI_Stop &rArr; CSI_EnableFifoDmaRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_EnableFifoDmaRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Reset
</UL>

<P><STRONG><a name="[185]"></a>CSI_TransferGetEmptyBufferCount</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_csi.o(.text.CSI_TransferGetEmptyBufferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CSI_TransferGetEmptyBufferCount &rArr; CSI_TransferGetQueueDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetQueueDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[186]"></a>CSI_TransferGetQueueDelta</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, fsl_csi.o(.text.CSI_TransferGetQueueDelta))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CSI_TransferGetQueueDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetEmptyBufferCount
</UL>

<P><STRONG><a name="[188]"></a>CSI_TransferIncreaseQueueIdx</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, fsl_csi.o(.text.CSI_TransferIncreaseQueueIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CSI_TransferIncreaseQueueIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetFullBuffer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferLoadBufferToDevice
</UL>

<P><STRONG><a name="[189]"></a>CSI_TransferLoadBufferToDevice</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fsl_csi.o(.text.CSI_TransferLoadBufferToDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CSI_TransferLoadBufferToDevice &rArr; CSI_SetRxBufferAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_SetRxBufferAddr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferIncreaseQueueIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[184]"></a>EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fsl_csi.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
</UL>

<P><STRONG><a name="[1a1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_csi.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[1aa]"></a>FLEXIO_ClearShifterErrorFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_flexio_camera.o(.text.FLEXIO_ClearShifterErrorFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO_ClearShifterErrorFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>

<P><STRONG><a name="[1a9]"></a>FLEXIO_ClearShifterStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_flexio_camera.o(.text.FLEXIO_ClearShifterStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO_ClearShifterStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>

<P><STRONG><a name="[153]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_gpio.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[15f]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[1bb]"></a>GPIO_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[1bf]"></a>GPIO_SetPinInterruptConfig</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_gpio.o(.text.GPIO_SetPinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[1cd]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, fsl_lpi2c.o(.text.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[154]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_lpspi.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[160]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1e1]"></a>LPSPI_ClearStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1d0]"></a>LPSPI_CombineWriteData</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, fsl_lpspi.o(.text.LPSPI_CombineWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = LPSPI_CombineWriteData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1ce]"></a>LPSPI_CommonIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fsl_lpspi.o(.text.LPSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPSPI_CommonIRQHandler &rArr; LPSPI_IsMaster
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>LPSPI_Enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1e0]"></a>LPSPI_FlushFifo</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, fsl_lpspi.o(.text.LPSPI_FlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPSPI_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1e4]"></a>LPSPI_GetRxFifoCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_GetRxFifoCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_GetRxFifoCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1df]"></a>LPSPI_GetRxFifoSize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_GetRxFifoSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_GetRxFifoSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1de]"></a>LPSPI_GetStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1e2]"></a>LPSPI_GetTxFifoCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_GetTxFifoCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_GetTxFifoCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1d1]"></a>LPSPI_IsMaster</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_IsMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetBaudRate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>LPSPI_ReadData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1e6]"></a>LPSPI_SeparateReadData</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, fsl_lpspi.o(.text.LPSPI_SeparateReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1d8]"></a>LPSPI_SetFifoWatermarks</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, fsl_lpspi.o(.text.LPSPI_SetFifoWatermarks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPSPI_SetFifoWatermarks
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1d5]"></a>LPSPI_SetMasterSlaveMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_SetMasterSlaveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_SetMasterSlaveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1d6]"></a>LPSPI_SetOnePcsPolarity</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fsl_lpspi.o(.text.LPSPI_SetOnePcsPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPSPI_SetOnePcsPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1e3]"></a>LPSPI_WriteData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[155]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[15a]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>

<P><STRONG><a name="[161]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[1a2]"></a>EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
</UL>

<P><STRONG><a name="[1ea]"></a>LPUART_ReadNonBlocking</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, fsl_lpuart.o(.text.LPUART_ReadNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = LPUART_ReadNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1e9]"></a>LPUART_SoftwareReset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_SoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[1f0]"></a>LPUART_TransferIsRxRingBufferFull</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, fsl_lpuart.o(.text.LPUART_TransferIsRxRingBufferFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = LPUART_TransferIsRxRingBufferFull &rArr; LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferGetRxRingBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1f1]"></a>LPUART_WriteNonBlocking</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_WriteNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = LPUART_WriteNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1a3]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[156]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_pit.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[15b]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pit.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>

<P><STRONG><a name="[162]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pit.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[1f8]"></a>PIT_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_pit.o(.text.PIT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = PIT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>

<P><STRONG><a name="[157]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_pwm.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[15c]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pwm.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
</UL>

<P><STRONG><a name="[163]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pwm.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[202]"></a>PWM_GetComplementU16</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_pwm.o(.text.PWM_GetComplementU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_GetComplementU16
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
</UL>

<P><STRONG><a name="[1fe]"></a>PWM_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_pwm.o(.text.PWM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = PWM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
</UL>

<P><STRONG><a name="[158]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_qtmr.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[15d]"></a>CLOCK_DisableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_DisableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Deinit
</UL>

<P><STRONG><a name="[164]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
</UL>

<P><STRONG><a name="[205]"></a>QTMR_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = QTMR_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Deinit
</UL>

<P><STRONG><a name="[20c]"></a>SAI_RxGetEnabledInterruptStatus</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, fsl_sai.o(.text.SAI_RxGetEnabledInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[20d]"></a>SAI_TxGetEnabledInterruptStatus</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, fsl_sai.o(.text.SAI_TxGetEnabledInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAI_TxGetEnabledInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[20e]"></a>SDMMCEVENT_GetInstance</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_sdmmc_event.o(.text.SDMMCEVENT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCEVENT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
</UL>

<P><STRONG><a name="[1b0]"></a>GPIO_PinRead</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>GPIO_PortGetInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.GPIO_PortGetInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>SDMMCHOST_NofiyCardInsertStatus</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_NofiyCardInsertStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMCHOST_NofiyCardInsertStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>CLOCK_SetDiv</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, zf_csi.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[175]"></a>CLOCK_SetMux</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, zf_csi.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[25a]"></a>DisableGlobalIRQ</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, zf_csi.o(.text.DisableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[1b9]"></a>GPIO_ClearPinsOutput</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, zf_gpio.o(.text.GPIO_ClearPinsOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ClearPinsOutput &rArr; GPIO_PortClear
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>

<P><STRONG><a name="[1c0]"></a>GPIO_PinReadPadStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, zf_gpio.o(.text.GPIO_PinReadPadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPadStatus
</UL>

<P><STRONG><a name="[1ba]"></a>GPIO_PortClear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, zf_gpio.o(.text.GPIO_PortClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>

<P><STRONG><a name="[1c4]"></a>GPIO_PortSet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, zf_gpio.o(.text.GPIO_PortSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
</UL>

<P><STRONG><a name="[1c1]"></a>GPIO_ReadPadStatus</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, zf_gpio.o(.text.GPIO_ReadPadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = GPIO_ReadPadStatus &rArr; GPIO_PinReadPadStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReadPadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>

<P><STRONG><a name="[1c3]"></a>GPIO_SetPinsOutput</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, zf_gpio.o(.text.GPIO_SetPinsOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetPinsOutput &rArr; GPIO_PortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>

<P><STRONG><a name="[159]"></a>CLOCK_ControlGate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, zf_iomuxc.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[165]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, zf_iomuxc.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[28d]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 64 bytes, Stack size 60 bytes, zf_iomuxc.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[28c]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 84 bytes, Stack size 60 bytes, zf_iomuxc.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[1f9]"></a>PIT_GetDefaultConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, zf_pit.o(.text.PIT_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = PIT_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[2af]"></a>PWM_SetPwmLdok</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, zf_pwm.o(.text.PWM_SetPwmLdok))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>

<P><STRONG><a name="[2b1]"></a>PWM_StartTimer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, zf_pwm.o(.text.PWM_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[2b3]"></a>QTMR_GetCurrentTimerCount</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, zf_qtimer.o(.text.QTMR_GetCurrentTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_GetCurrentTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_get
</UL>

<P><STRONG><a name="[2b4]"></a>QTMR_StartTimer</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, zf_qtimer.o(.text.QTMR_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = QTMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[174]"></a>CLOCK_SetDiv</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, zf_spi.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[176]"></a>CLOCK_SetMux</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, zf_spi.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[306]"></a>LPSPI_ClearStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zf_spi.o(.text.LPSPI_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[307]"></a>LPSPI_DisableInterrupts</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, zf_spi.o(.text.LPSPI_DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[304]"></a>LPSPI_Enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, zf_spi.o(.text.LPSPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[305]"></a>LPSPI_FlushFifo</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, zf_spi.o(.text.LPSPI_FlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPSPI_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[30c]"></a>LPUART_WriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, zf_uart.o(.text.LPUART_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>

<P><STRONG><a name="[1b4]"></a>GPIO_ClearPinsInterruptFlags</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, seekfree_mt9v03x.o(.text.GPIO_ClearPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ClearPinsInterruptFlags &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
</UL>

<P><STRONG><a name="[1b5]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, seekfree_mt9v03x.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>

<P><STRONG><a name="[2aa]"></a>EnableGlobalIRQ</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, seekfree_mt9v03x_csi.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[1b6]"></a>GPIO_ClearPinsInterruptFlags</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, seekfree_scc8660.o(.text.GPIO_ClearPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ClearPinsInterruptFlags &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_vsync
</UL>

<P><STRONG><a name="[1b7]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, seekfree_scc8660.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>

<P><STRONG><a name="[21f]"></a>USB_DeviceEhciCancelControlPipe</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, usb_device_ehci.o(.text.USB_DeviceEhciCancelControlPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
</UL>

<P><STRONG><a name="[224]"></a>USB_DeviceEhciFillSetupBuffer</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usb_device_ehci.o(.text.USB_DeviceEhciFillSetupBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceEhciFillSetupBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciInterruptTokenDone
</UL>

<P><STRONG><a name="[221]"></a>USB_DeviceEhciInterruptPortChange</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptPortChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USB_DeviceEhciInterruptPortChange &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[222]"></a>USB_DeviceEhciInterruptReset</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USB_DeviceEhciInterruptReset &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[226]"></a>USB_DeviceEhciInterruptSof</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptSof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceEhciInterruptSof
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[223]"></a>USB_DeviceEhciInterruptTokenDone</STRONG> (Thumb, 1088 bytes, Stack size 64 bytes, usb_device_ehci.o(.text.USB_DeviceEhciInterruptTokenDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = USB_DeviceEhciInterruptTokenDone &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciFillSetupBuffer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[229]"></a>USB_DeviceControl</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, usb_device_dci.o(.text.USB_DeviceControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>

<P><STRONG><a name="[227]"></a>USB_DeviceNotification</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, usb_device_dci.o(.text.USB_DeviceNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_DeviceNotification &rArr; USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>

<P><STRONG><a name="[228]"></a>USB_DeviceResetNotification</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, usb_device_dci.o(.text.USB_DeviceResetNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_DeviceResetNotification &rArr; USB_DeviceControl
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>

<P><STRONG><a name="[1ae]"></a>GPIO_ClearPinsInterruptFlags</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, isr.o(.text.GPIO_ClearPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ClearPinsInterruptFlags &rArr; GPIO_PortClearInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>GPIO_GetPinsInterruptFlags</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, isr.o(.text.GPIO_GetPinsInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_GetPinsInterruptFlags &rArr; GPIO_PortGetInterruptFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>GPIO_PortClearInterruptFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, isr.o(.text.GPIO_PortClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PortClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsInterruptFlags
</UL>

<P><STRONG><a name="[1bc]"></a>GPIO_PortGetInterruptFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr.o(.text.GPIO_PortGetInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>

<P><STRONG><a name="[1fb]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, isr.o(.text.PIT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>PIT_GetStatusFlags</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, isr.o(.text.PIT_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[29f]"></a>EnableGlobalIRQ</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, main.o(.text.EnableGlobalIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2ab]"></a>__NVIC_SetPriority</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, openart_mini.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openart_mini_init
</UL>

<P><STRONG><a name="[18f]"></a>CarInfoInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system.o(.text.CarInfoInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarInformation_init
</UL>

<P><STRONG><a name="[190]"></a>SystemSettingsInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system.o(.text.SystemSettingsInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarInformation_init
</UL>

<P><STRONG><a name="[12b]"></a>AngleControlCal</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, control.o(.text.AngleControlCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AngleControlCal
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleControl
</UL>

<P><STRONG><a name="[12a]"></a>CarPostureCal</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, control.o(.text.CarPostureCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = CarPostureCal &rArr; get_icm20602_gyro_spi &rArr; icm_spi_r_reg_bytes &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleControl
</UL>

<P><STRONG><a name="[1f3]"></a>MotorControlOut</STRONG> (Thumb, 528 bytes, Stack size 8 bytes, control.o(.text.MotorControlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = MotorControlOut &rArr; motor_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[21a]"></a>SpeedChangeI</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, control.o(.text.SpeedChangeI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SpeedChangeI
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlCal
</UL>

<P><STRONG><a name="[219]"></a>SpeedControlCal</STRONG> (Thumb, 1860 bytes, Stack size 40 bytes, control.o(.text.SpeedControlCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SpeedControlCal &rArr; SpeedChangeI
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedChangeI
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[218]"></a>Speedmath</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, control.o(.text.Speedmath))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Speedmath
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[14c]"></a>Binary_threshold</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, image.o(.text.Binary_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200<LI>Call Chain = Binary_threshold &rArr; HistEqImageConvert
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iteration_Threshould
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistEqImageConvert
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Otsu_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_renew
</UL>

<P><STRONG><a name="[14d]"></a>Otsu_threshold</STRONG> (Thumb, 566 bytes, Stack size 2176 bytes, image.o(.text.Otsu_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = Otsu_threshold &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_threshold
</UL>

<P><STRONG><a name="[23e]"></a>alter_flag</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, server.o(.text.alter_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = alter_flag &rArr; MotorStopped &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStopped
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renew_Carpulse
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_pursit
</UL>

<P><STRONG><a name="[23f]"></a>renew_Carpulse</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, server.o(.text.renew_Carpulse))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_find_dot
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carry_image
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alter_flag
</UL>

<P><STRONG><a name="[2fd]"></a>sort_dot</STRONG> (Thumb, 268 bytes, Stack size 108 bytes, server.o(.text.sort_dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sort_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_find_dot
</UL>

<P><STRONG><a name="[e2]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, fsl_debug_console.o(.text.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[192]"></a>ConvertFloatRadixNumToString</STRONG> (Thumb, 662 bytes, Stack size 152 bytes, fsl_str.o(.text.ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[195]"></a>ConvertRadixNumToString</STRONG> (Thumb, 480 bytes, Stack size 120 bytes, fsl_str.o(.text.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[f8]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[f7]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[fe]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[f6]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[2eb]"></a>_has_defunct_thread</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, idle.o(.text._has_defunct_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2ec]"></a>rt_list_remove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, idle.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[ef]"></a>rt_thread_idle_entry</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[2ca]"></a>rt_ipc_list_resume</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ipc.o(.text.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[2be]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, ipc.o(.text.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[2bb]"></a>rt_ipc_object_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(.text.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ipc_object_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[2cd]"></a>rt_list_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipc.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[2cc]"></a>rt_list_insert_before</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[2c1]"></a>rt_list_isempty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ipc.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[2ae]"></a>divide</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, kservice.o(.text.divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = divide
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[2ad]"></a>print_number</STRONG> (Thumb, 658 bytes, Stack size 112 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2f6]"></a>skip_atoi</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, kservice.o(.text.skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2d5]"></a>rt_list_insert_after</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, object.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2d6]"></a>rt_list_remove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, object.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[22a]"></a>_get_highest_priority_thread</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, scheduler.o(.text._get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _get_highest_priority_thread &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[230]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, scheduler.o(.text._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2e4]"></a>rt_list_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[2dd]"></a>rt_list_insert_before</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, scheduler.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[2df]"></a>rt_list_isempty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scheduler.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[2de]"></a>rt_list_remove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, scheduler.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[233]"></a>_rt_thread_init</STRONG> (Thumb, 330 bytes, Stack size 112 bytes, thread.o(.text._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[23c]"></a>_thread_cleanup_execute</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, thread.o(.text._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[234]"></a>rt_list_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, thread.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2e9]"></a>rt_list_insert_after</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, thread.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2f1]"></a>rt_list_remove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, thread.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[238]"></a>_rt_timer_init</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, timer.o(.text._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _rt_timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[23a]"></a>_rt_timer_remove</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timer.o(.text._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[239]"></a>rt_list_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[2f5]"></a>rt_list_insert_after</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[2f4]"></a>rt_list_isempty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[23b]"></a>rt_list_remove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[245]"></a>bus_fault_track</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, cpuport.o(.text.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[27f]"></a>hard_fault_track</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, cpuport.o(.text.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[280]"></a>mem_manage_fault_track</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, cpuport.o(.text.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[281]"></a>usage_fault_track</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, cpuport.o(.text.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[100]"></a>clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmd.o(.text.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[295]"></a>list_find_init</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, cmd.o(.text.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = list_find_init &rArr; rt_object_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[297]"></a>list_get_next</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, cmd.o(.text.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[296]"></a>object_split</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cmd.o(.text.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[298]"></a>rt_list_isempty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmd.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[299]"></a>rt_list_len</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmd.o(.text.rt_list_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[29a]"></a>show_wait_queue</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cmd.o(.text.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[22c]"></a>_msh_exec_cmd</STRONG> (Thumb, 286 bytes, Stack size 104 bytes, msh.o(.text._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[22e]"></a>msh_get_cmd</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, msh.o(.text.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[22f]"></a>msh_split</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, msh.o(.text.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[2a7]"></a>str_common</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, msh.o(.text.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[26a]"></a>finsh_getchar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(.text.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = finsh_getchar &rArr; rt_hw_console_getchar &rArr; rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[272]"></a>shell_auto_complete</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, shell.o(.text.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[271]"></a>shell_handle_history</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, shell.o(.text.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[274]"></a>shell_push_history</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, shell.o(.text.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[31b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30e]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[31e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
